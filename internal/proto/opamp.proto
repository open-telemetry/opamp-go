// Copyright 2021, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// OpAMP: Open Agent Management Protocol (https://github.com/open-telemetry/opamp-spec)

syntax = "proto3";

package opamp.proto;

import "anyvalue.proto";

option go_package = "github.com/open-telemetry/opamp-go/protobufs";

message AgentToServer {
    // Globally unique identifier of the running instance of the agent. SHOULD remain
    // unchanged for the lifetime of the agent process.
    // Recommended format: https://github.com/ulid/spec
    string instance_uid = 1;

    // The status of the Agent. MUST be set in the first AgentToServer message that the
    // Agent sends after connecting.
    // This field SHOULD be unset if this information is unchanged since the last
    // AgentToServer message for this agent was sent in the stream.
    StatusReport status_report = 2;

    // The list of the agent addons, including addon statuses.
    // This field SHOULD be unset if this information is unchanged since the last
    // AgentToServer message for this agent was sent in the stream.
    AgentAddonStatuses addon_statuses = 3;

    // The status of the installation operation that was previously offered by the server.
    // This field SHOULD be unset if the installation status is unchanged since the
    // last AgentToServer message.
    AgentInstallStatus agent_install_status = 4;

    // AgentDisconnect MUST be set in the last AgentToServer message sent from the
    // agent to the server.
    AgentDisconnect agent_disconnect = 5;
}

// AgentDisconnect is the last message sent from the agent to the server. The server
// SHOULD forget the association of the agent instance with the message stream.
//
// If the message stream is closed in the transport layer then the server SHOULD
// forget association of all agent instances that were previously established for
// this message stream using AgentConnect message, even if the corresponding
// AgentDisconnect message were not explicitly received from the agent.
message AgentDisconnect {
}

message ServerToAgent {
    // Agent instance uid. MUST match the instance_uid field in AgentToServer message.
    // Used for multiplexing messages from/to multiple agents using one message stream.
    string instance_uid = 1;

    // error_response is set if the Server wants to indicate that something went wrong
    // during processing of an AgentToServer message. If error_response is set then
    // all other fields below must be unset and vice versa, if any of the fields below is
    // set then error_response must be unset.
    ServerErrorResponse error_response = 2;

    // remote_config field is set when the server has a remote config offer for the agent.
    AgentRemoteConfig remote_config = 3;

    // This field is set when the Server wants the Agent to change one or more
    // of its client connection settings (destination, headers, certificate, etc).
    ConnectionSettingsOffers connection_settings = 4;

    // addons_available field is set when the server has addons to offer to the agent.
    AddonsAvailable addons_available = 5;

    // agent_package_available field is set when the server has a different version
    // of an agent package available for download.
    AgentPackageAvailable agent_package_available = 6;

    enum Flags {
        FlagsUnspecified = 0;

        // Flags is a bit mask. Values below define individual bits.

        // Report* flags an be used by the server if the agent did not include the
        // particular bit of information in the last status report (which is an allowed
        // optimization) but the server does not have it (e.g. was restarted and lost state).

        // The server asks the agent to report effective config.
        ReportEffectiveConfig = 0x00000001;

        // The server asks the agent to report addon statuses.
        ReportAddonStatus     = 0x00000002;
    }
    // Bit flags as defined by Flags bit masks.
    Flags flags = 7;

    // Bitmask of flags defined by ServerCapabilities enum.
    // All bits that are not defined in ServerCapabilities enum MUST be set to 0
    // by the Server. This allows extending the protocol and the ServerCapabilities
    // enum in the future such that old Servers automatically report that they
    // don't support the new capability.
    // This field MUST be set in the first ServerToAgent sent by the Server and MAY
    // be omitted in subsequent ServerToAgent messages by setting it to
    // UnspecifiedServerCapability value.
    ServerCapabilities capabilities = 8;
}

enum ServerCapabilities {
    // The capabilities field is unspecified.
    UnspecifiedServerCapability = 0;
    // The Server can accept status reports. This bit MUST be set, since all Server
    // MUST be able to accept status reports.
    AcceptsStatus                  = 0x00000001;
    // The Server can offer remote configuration to the Agent.
    OffersRemoteConfig             = 0x00000002;
    // The Server can accept EffectiveConfig in StatusReport.
    AcceptsEffectiveConfig         = 0x00000004;
    // The Server can offer Addons.
    OffersAddons                   = 0x00000008;
    // The Server can accept Addon status.
    AcceptsAddonsStatus            = 0x00000010;
    // The Server can offer packages to install.
    OffersAgentPackage             = 0x00000020;
    // The Server can accept the installation status of the package.
    AcceptsAgentPackageStatus      = 0x00000040;
    // The Server can offer connection settings.
    OffersConnectionSettings       = 0x00000080;

    // Add new capabilities here, continuing with the least significant unused bit.
}

// The ConnectionSettings message is a collection of fields which comprise an
// offer from the server to the agent to use the specified settings for a network
// connection. It is not required that all fields in this message are specified.
// The server may specify only some of the fields, in which case it means that
// the server offers the agent to change only those fields, while keeping the
// rest of the fields unchanged.
//
// For example the server may send a ConnectionSettings message with only the
// certificate field set, while all other fields are unset. This means that
// the server wants the agent to use a new certificate and continue sending to
// the destination it is currently sending using the current header and other
// settings.
//
// For fields which reference other messages the field is considered unset
// when the reference is unset.
//
// For primitive field (string) we rely on the "flags" to describe that the
// field is not set (this is done to overcome the limitation of old protoc
// compilers don't generate methods that allow to check for the presence of
// the field.
message ConnectionSettings {
    // A URL, host:port or some other destination specifier.
    //
    // For OpAMP destination this MUST be a WebSocket URL and MUST be non-empty, for
    // example: "wss://example.com:4318/v1/opamp"
    //
    // For own telemetry destination this MUST be the full HTTP URL to an
    // OTLP/HTTP/Protobuf receiver. The value MUST be a full URL with path and schema
    // and SHOULD begin with "https://", for example "https://example.com:4318/v1/metrics"
    // The Agent MAY refuse to send the telemetry if the URL begins with "http://".
    // The field is considered unset if (flags & DestinationEndpointSet)==0.
    string destination_endpoint = 1;

    // Headers to use when connecting. Typically used to set access tokens or
    // other authorization headers. For HTTP-based protocols the agent should
    // set these in the request headers.
    // For example:
    // key="Authorization", Value="Basic YWxhZGRpbjpvcGVuc2VzYW1l".
    // if the field is unset then the agent SHOULD continue using the headers
    // that it currently has (if any).
    Headers headers = 2;

    // A URL, host:port or some other specifier of an intermediary proxy.
    // Empty if no proxy is used.
    //
    // Example use case: if OpAMP proxy is also an OTLP intermediary Collector then
    // the OpAMP proxy can direct the Agents that connect to it to also send Agents's
    // OTLP metrics through its OTLP metrics pipeline.
    // Can be used for example by Otel Helm chart with 2 stage-collection when Agents
    // on K8s nodes are proxied through a standalone Collector.
    //
    // For example: "https://proxy.example.com:5678"
    // The field is considered unset if (flags & ProxyEndpointSet)==0.
    string proxy_endpoint = 3;

    // Headers to use when connecting to a proxy.  For HTTP-based protocols
    // the agent should set these in the request headers.
    // If no proxy is used the Headers field must be present and must contain no headers.
    // For example:
    // key="Proxy-Authorization", value="Basic YWxhZGRpbjpvcGVuc2VzYW1l".
    // if the field is unset then the agent SHOULD continue using the proxy headers
    // that it currently has (if any).
    Headers proxy_headers = 4;

    // The agent should use the offered certificate to connect to the destination
    // from now on. If the agent is able to validate and connect using the offered
    // certificate the agent SHOULD forget any previous client certificates
    // for this connection.
    // This field is used to perform a client certificate revocation/rotation.
    // if the field is unset then the agent SHOULD continue using the certificate
    // that it currently has (if any).
    TLSCertificate certificate = 5;

enum Flags {
    _ = 0;
    DestinationEndpointSet = 0x01;
    ProxyEndpointSet = 0x02;
}
    // Bitfield of Flags.
    Flags flags = 6;
}

message Headers {
    repeated Header headers = 1;
}

message Header {
    string key = 1;
    string value = 2;
}

message TLSCertificate {
    // The (public_key,private_key) certificate pair should be issued and
    // signed by a Certificate Authority that the destination server recognizes.
    //
    // It is highly recommended that the private key of the CA certificate is NOT
    // stored on the destination server otherwise compromising the server will allow
    // a malicious actor to issue valid server certificates which will be automatically
    // trusted by all agents and will allow the actor to trivially MITM agent-to-server
    // traffic of all servers that use this CA certificate for their server-side
    // certificates.
    //
    // Alternatively the certificate may be self-signed, assuming the server can
    // verify the certificate.

    // PEM-encoded public key of the certificate. Required.
    bytes public_key = 1;

    // PEM-encoded private key of the certificate. Required.
    bytes private_key = 2;

    // PEM-encoded public key of the CA that signed this certificate.
    // Optional. MUST be specified if the certificate is CA-signed.
    // Can be stored by TLS-terminating intermediary proxies in order to verify
    // the connecting client's certificate in the future.
    // It is not recommended that the agent accepts this CA as an authority for
    // any purposes.
    bytes ca_public_key = 3;
}

message ConnectionSettingsOffers {
    // Hash of all settings, including settings that may be omitted from this message
    // because they are unchanged. The agent should remember the hash and include
    // it in the subsequent ConnectionStatuses message, in the last_connection_settings_hash
    // field.
    bytes hash = 1;

    // Settings to connect to the OpAMP server.
    // If this field is not set then the agent should assume that the settings are
    // unchanged and should continue using existing settings.
    // The agent MUST verify the offered connection settings by actually connecting
    // before accepting the setting to ensure it does not loose access to the OpAMP
    // server due to invalid settings.
    ConnectionSettings opamp = 2;

    // Settings to connect to an OTLP metrics backend to send agent's own metrics to.
    // If this field is not set then the agent should assume that the settings
    // are unchanged.
    //
    // Once accepted the agent should periodically send to the specified destination
    // its own metrics, i.e. metrics of the agent process and any custom metrics that
    // describe the agent state.
    //
    // The Resource in the OTLP metrics SHOULD describe the agent:
    // - service.instance.id SHOULD be set to Agent's instance uid that is used in
    //   the OpAMP messages.
    // - service.name SHOULD be set to Agent's type, matching the value of
    //   agent_type field in AgentDescription message.
    // - service.version SHOULD be set to Agent's version, matching the value of
    //   agent_version field in AgentDescription message.
    // - any other applicable Resource attributes that describe the agent, such as
    //   Operating System on which the Agent runs as described here
    //   https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md
    //
    // Process metrics MUST follow the conventions for processes:
    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/semantic_conventions/process-metrics.md
    ConnectionSettings own_metrics = 3;
    // Similar to own_metrics, but for traces.
    ConnectionSettings own_traces = 4;
    // Similar to own_metrics, but for logs.
    ConnectionSettings own_logs = 5;

    // Another set of connection settings, with a string name associated with each.
    // How the agent uses these is agent-specific. Typically the name represents
    // the name of the destination to connect to (as it is known to the agent).
    // If this field is not set then the agent should assume that the other_connections
    // settings are unchanged.
    map<string,ConnectionSettings> other_connections = 6;
}

// List of addons that the server offers to the agent.
message AddonsAvailable {
    // Map of addons. Keys are addon names, values are the addons available for download.
    map<string, AddonAvailable> addons = 1;

    // Aggregate hash of all remotely installed addons. The agent SHOULD include this
    // value in subsequent StatusReport messages. This in turn allows the management
    // server to identify that a different set of addons is available for the agent
    // and specify the available addons in the next DataToAgent message.
    //
    // This field MUST be always set if the management server supports addons
    // of agents.
    //
    // The hash is calculated as an aggregate of all addon names and content.
    bytes all_addons_hash = 2;
}

// An Addon is a collection of named files. The content of the files, functionality
// provided by the addons, how they are stored and used by the Agent side is agent
// type-specific and is outside the concerns of the OpAMP protocol.
//
// If the agent does not have an installed addon with the specified name then
// it SHOULD download it from the specified URL and install it.
//
// If the agent already has an installed addon with the specified name
// but with a different hash then the agent SHOULD download and
// install the addon again, since it is a different version of the same addon.
//
// If the agent has an installed addon with the specified name and the same
// hash then the agent does not need to do anything, it already
// has the right version of the addon.
message AddonAvailable {
    // The downloadable file of the addon.
    DownloadableFile file = 1;

    // The hash of the addon. SHOULD be calculated based on addon name and
    // content of the file of the addon.
    bytes hash = 2;

    // TODO: do we need other fields, e.g. addon version or description?
}

message DownloadableFile {
    // The URL from which the file can be downloaded using HTTP GET request.
    // The server at the specified URL SHOULD support range requests
    // to allow for resuming downloads.
    string download_url = 1;

    // The hash of the file content. Can be used by the Agent to verify that the file
    // was downloaded correctly.
    bytes content_hash = 2;
}

message ServerErrorResponse {
    enum Type {
        // Unknown error. Something went wrong, but it is not known what exactly.
        // The Agent SHOULD NOT retry the message.
        // The error_message field may contain a description of the problem.
        Unknown = 0;

        // The AgentToServer message was malformed. The Agent SHOULD NOT retry
        // the message.
        BadRequest = 1;

        // The server is overloaded and unable to process the request. The agent
        // should retry the message later. retry_info field may be optionally
        // set with additional information about retrying.
        Unavailable = 2;
    }
    Type type = 1;

    // Error message in the string form, typically human readable.
    string error_message = 2;

    oneof Details {
        // Additional information about retrying if type==UNAVAILABLE.
        RetryInfo retry_info = 3;
    }
}

message RetryInfo {
    uint64 retry_after_nanoseconds = 1;
}

// AgentPackageAvailable message is sent from the server to the agent to indicate that there
// is an agent package available for the agent to download and self-update. Can be
// used by the server to initiate an agent upgrade or downgrade.
message AgentPackageAvailable {
    // The agent version that is available on the server side. The agent may for
    // example use this information to avoid downloading a package that was previously
    // already downloaded and failed to install.
    string version = 1;

    // The downloadable file of the package.
    // Executable files SHOULD be code-signed and the signature SHOULD be verified
    // by the agent after downloading and before installing.
    DownloadableFile file = 2;
}

////////////////////////////////////////////////////////////////////////////////////
// Status reporting

message AgentDescription {
    // Reverse FQDN that uniquely identifies the agent type, e.g. "io.opentelemetry.collector"
    string agent_type = 1;

    // Version number of the agent build. The server can use this information to
    // decide if it wants to offer a package of a different version to the agent
    // via PackageAvailable message.
    string agent_version = 2;

    // Attributes that describe the agent and the environment it runs in.
    // Keys/values are according to OpenTelemetry semantic conventions, see:
    // https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/resource/semantic_conventions
    //
    // The following attributes SHOULD be included:
    // - os.type, os.version - to describe where the agent runs.
    //
    // The following attributes are recommended to be included:
    // - host.* to describe the host the agent runs on.
    // - cloud.* to describe the cloud where the host is located.
    // - other os.* attributes not listed in the previous paragraph.
    // - any other relevant Resource attributes that describe this agent and the
    //   environment it runs in.
    // - any user-defined attributes that the end user would like to associate with
    //   this agent.
    repeated KeyValue agent_attributes = 3;

    // TODO: add ability to specify related entities (such as the Service the Agent is
    // is responsible/associated with).
}

message StatusReport {
    // Data that describes the agent, its type, where it runs, etc.
    // May be omitted if nothing changed since last StatusReport.
    AgentDescription agent_description = 1;

    // Current effective config of the agent. May be different from the remote config
    // received from the management server, e.g. because the agent uses a local
    // config instead (or in addition).
    //
    // This field SHOULD be unset if the effective config is unchanged since the last
    // StatusReport message.
    EffectiveConfig effective_config = 2;

    // The status of the remote config that was previously received from the server.
    // This field SHOULD be unset if the remote config status is unchanged since the
    // last StatusReport message.
    RemoteConfigStatus remote_config_status = 3;

    // Bitmask of flags defined by AgentCapabilities enum.
    // All bits that are not defined in AgentCapabilities enum MUST be set to 0 by
    // the Agent. This allows extending the protocol and the AgentCapabilities enum
    // in the future such that old Agents automatically report that they don't
    // support the new capability.
    // This field MUST be set in the first StatusReport sent by the Agent and MAY
    // be omitted in subsequent StatusReport messages by setting it to
    // UnspecifiedAgentCapability value.
    AgentCapabilities capabilities = 4;
}

enum AgentCapabilities {
    // The capabilities field is unspecified.
    UnspecifiedAgentCapability = 0;
    // The Agent can report status. This bit MUST be set, since all Agents MUST
    // report status.
    ReportsStatus                  = 0x00000001;
    // The Agent can accept remote configuration from the Server.
    AcceptsRemoteConfig            = 0x00000002;
    // The Agent will report EffectiveConfig in StatusReport.
    ReportsEffectiveConfig         = 0x00000004;
    // The Agent can accept Addon offers.
    AcceptsAddons                  = 0x00000008;
    // The Agent can report Addon status.
    ReportsAddonsStatus            = 0x00000010;
    // The Agent can accept packages to install.
    AcceptsAgentPackage            = 0x00000020;
    // The Agent can report the installation status of the package.
    ReportsAgentPackageStatus      = 0x00000040;
    // The Agent can report own traces to the destination specified by
    // the Server via ConnectionSettingsOffers.own_traces field.
    ReportsOwnTraces               = 0x00000080;
    // The Agent can report own metrics to the destination specified by
    // the Server via ConnectionSettingsOffers.own_metrics field.
    ReportsOwnMetrics              = 0x00000100;
    // The Agent can report own logs to the destination specified by
    // the Server via ConnectionSettingsOffers.own_logs field.
    ReportsOwnLogs                 = 0x00000200;
    // The Agent can accept connections settings for OpAMP via
    // ConnectionSettingsOffers.opamp field.
    AcceptsOpAMPConnectionSettings = 0x00000400;
    // The Agent can accept connections settings for other destinations via
    // ConnectionSettingsOffers.other_connections field.
    AcceptsOtherConnectionSettings = 0x00000800;

    // Add new capabilities here, continuing with the least significant unused bit.
}

message EffectiveConfig {
    // The hash of the effective config. After establishing OpAMP connection if the
    // effective config did not change since it was last reported during the previous
    // connection sessions the Agent is recommended to include only the hash and omit the
    // config_map field to save bandwidth.
    // The Server SHOULD compare this hash with the last hash of effective config
    // it received from the Agent and if the hashes are different the Server SHOULD
    // ask the Agent to report its full effective config by sending a DataForAgent
    // message with ReportEffectiveConfig flag set.
    bytes hash = 1;

    // The effective config of the Agent. SHOULD be omitted if unchanged since last
    // reported.
    // MUST be set if the Agent has received the ReportEffectiveConfig flag in the
    // DataForAgent message.
    AgentConfigMap config_map = 2;
}

message RemoteConfigStatus {
    // The hash of the remote config that was last received by this agent from the
    // management server. The server SHOULD compare this hash with the config hash it has
    // for the agent and if the hashes are different the server MUST include
    // the remote_config field in the response in the DataForAgent message.
    bytes last_remote_config_hash = 1;

    enum Status {
        // Remote config was successfully applied by the Agent.
        Applied = 0;

        // Agent is currently applying the remote config that it received earlier.
        Applying = 1;

        // Agent tried to apply the config received earlier, but it failed.
        // See error_message for more details.
        Failed = 2;
    }
    Status status = 2;

    string error_message = 3;
}

// The status of all addons that the agent has or was offered.
message AgentAddonStatuses {
    // Map of addons. Keys are addon names, and MUST match the name field of AgentAddonStatus.
    map<string, AgentAddonStatus> addons = 1;

    // The aggregate hash of all addons that this Agent previously received from
    // the server via AddonsAvailable message.
    // The server SHOULD compare this hash to the aggregate hash of all addons that
    // it has for this Agent and if the hashes are different the server SHOULD send
    // an AddonsAvailable message to the agent.
    bytes server_provided_all_addons_hash = 2;
}

// The status of a single addon.
message AgentAddonStatus {
    // Addon name. MUST be always set.
    string name = 1;

    // The hash of the addon that the agent has.
    // MUST be set if the agent has this addon.
    // MUST be empty if the agent does not have this addon. This may be the case for
    // example if the addon was offered by server but failed to install and the agent
    // did not have this addon previously.
    bytes agent_has_hash = 2;

    // The hash of the addon that the server offered to the agent.
    // MUST be set if the installation is initiated by an
    // earlier offer from the server to install this addon.
    //
    // MUST be empty if the Agent has this addon but it was installed locally and
    // was not offered by the server.
    //
    // Note that it is possible for both has_hash and
    // server_offered_hash fields to be set and to have different values.
    // This is for example possible if the agent already has a version of the addon
    // successfully installed, the server offers a different version, but the agent
    // fails to install that version.
    bytes server_offered_hash = 3;

    enum Status {
        // Addon is successfully installed by the Agent. error_message MUST NOT be set.
        Installed = 0;

        // Installation of this addon has not yet started.
        InstallPending = 1;

        // Agent is currently downloading and installing the addon.
        // server_offered_hash MUST be set to indicate the version
        // that the agent is installing. error_message MUST NOT be set.
        Installing = 2;

        // Agent tried to install the addon but installation failed.
        // server_offered_hash MUST be set to indicate the version
        // that the agent tried to install. error_message may also contain more
        // details about the failure.
        InstallFailed = 3;
    }
    Status status = 4;

    // Error message if the status is erroneous.
    string error_message = 5;
}

// The status of the last install status performed by the agent.
message AgentInstallStatus {
    // The version field from the AgentPackageAvailable that the server offered
    // to the agent. MUST be set if the agent previously received an offer from
    // the server to install this agent.
    string server_offered_version = 1;

    // The hash of the DownloadableFileList of agent package that the server
    // offered to the agent.
    bytes server_offered_hash = 2;

    enum Status {
        // Agent package was successfully installed. error_message MUST NOT be set.
        Installed = 0;

        // Agent is currently downloading and installing the package.
        // server_offered_hash MUST be set to indicate the version
        // that the agent is installing. error_message MUST NOT be set.
        Installing = 1;

        // Agent tried to install the package but installation failed.
        // server_offered_hash MUST be set to indicate the package
        // that the agent tried to install. error_message may also contain more
        // details about the failure.
        InstallFailed = 2;

        // Agent did not install the package because it is not permitted to.
        // This may be for example the case when operating system permissions
        // prevent the agent from self-updating or when self-updating is disabled
        // by the user. error_message may also contain more details about
        // what exactly is not permitted.
        InstallNoPermission = 3;
    }
    Status status = 3;

    // Optional human readable error message if the status is erroneous.
    string error_message = 4;
}

/////////////////////////////////////////////////////////////////////////////////////
// Config messages
/////////////////////////////////////////////////////////////////////////////////////

message AgentRemoteConfig {
    // Agent config offered by the management server to the agent instance. SHOULD NOT be
    // set if the config for this agent has not changed since it was last requested (i.e.
    // AgentConfigRequest.last_remote_config_hash field is equal to
    // AgentConfigResponse.config_hash field).
    AgentConfigMap config = 1;

    // Hash of "config". The agent SHOULD include this value in subsequent StatusReport
    // messages. This in turn allows the management server to identify that a new config is
    // available for the agent.
    //
    // This field MUST be always set if the management server supports remote configuration
    // of agents.
    //
    // Management server must choose a hashing function that guarantees lack of hash
    // collisions in practice.
    bytes config_hash = 2;
}

message AgentConfigMap {
    // Map of configs. Keys are config file names or config section names.
    // The configuration is assumed to be a collection of one or more named config files
    // or sections.
    // For agents that use a single config file or section the map SHOULD contain a single
    // entry and the key may be an empty string.
    map<string, AgentConfigFile> config_map = 1;
}

message AgentConfigFile {
    // Config file or section body. The content, format and encoding depends on the agent
    // type. The content_type field may optionally describe the MIME type of the body.
    bytes body = 1;

    // Optional MIME Content-Type that describes what's in the body field, for
    // example "text/yaml".
    string content_type = 2;
}
